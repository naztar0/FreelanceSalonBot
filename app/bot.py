#!/usr/bin/env python
import logging
import json
from contextlib import suppress
from datetime import datetime, timedelta
from app import config, misc
from app.misc import bot, dp
from app.utils.my_utils import *
from app.utils.database_connection import DatabaseConnection

from aiogram import executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import exceptions, parts


class NewOrder(StatesGroup):
    category = State()
    location = State()
    date = State()
    time = State()
    price = State()
    form_text_media = State()


class Portfolio(StatesGroup):
    view = State()
    text = State()
    media = State()


class NewLocation(StatesGroup): change = State()
class Subscriptions(StatesGroup): change = State()
class Top_up_balance(StatesGroup): amount = State()
class Subs_pay(StatesGroup): pay = State()


async def _back(message, state, key):
    if message.text == misc.back_button:
        await state.finish()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ButtonSet(key))
        return True


async def media_handler(message, state):
    data = await state.get_data()
    media = MediaGroup(data)
    if message.photo:
        media.add(photo=message.photo[-1].file_id)
        await state.update_data(media.to_dict)
    elif message.video:
        media.add(video=message.video.file_id)
        await state.update_data(media.to_dict)
    else:
        if message.document:
            await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª")
        else:
            await message.reply("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")


async def start_menu(message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ç–æ –≤—ã üòá\nüëâ –ö–ª–∏–µ–Ω—Ç - –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±—å—é—Ç–∏ —É—Å–ª—É–≥—É\n"
                         "üëâ –ú–∞—Å—Ç–µ—Ä - –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Ä–∞–±–æ—ÇüòÉ.",
                         reply_markup=ButtonSet(ButtonSet.START, row_width=2))


async def create_master(message):
    existsQuery = "SELECT EXISTS (SELECT ID FROM masters WHERE user_id=(%s))"
    insertQuery = "INSERT INTO masters (user_id) VALUES (%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(existsQuery, [message.chat.id])
        exists = cursor.fetchone()[0]
        if not exists:
            cursor.execute(insertQuery, [message.chat.id])
            conn.commit()
    await message.answer(f"QSalon –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\nüëâ–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                         f"üëâ–≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç –∏ –∑–∞—è–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                         f"–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n–í—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –≤–∞–º –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º.\n\n"
                         f"–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @rivikate",
                         parse_mode='Markdown', reply_markup=ButtonSet(ButtonSet.MASTER_1, row_width=2))


async def create_order(message):
    await NewOrder.category.set()
    await message.answer("–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏", reply_markup=ButtonSet(ButtonSet.BACK))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏", reply_markup=ButtonSet(ButtonSet.INL_CLIENT_CATEGORIES))


async def perform_order(message, order_id):
    selectQuery = "SELECT client_id, master_id FROM orders WHERE ID=(%s)"
    selectPortfolioQuery = "SELECT portfolio, ST_X(location), ST_Y(location) FROM masters WHERE user_id=(%s)"
    updateMessageQuery = "UPDATE orders SET message_id=(%s) WHERE ID=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [order_id])
        client_id, master_id = cursor.fetchone()
        if not master_id:
            cursor.execute(selectPortfolioQuery, [message.chat.id])
            portfolio, *location = cursor.fetchone()
            cursor.executemany(updateMessageQuery, [(message.message_id, order_id)])
            conn.commit()
    await message.edit_reply_markup()
    if master_id:
        await message.reply("–ú–∞—Å—Ç–µ—Ä –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –Ω–∞—à–µ–ª—Å—è")
        return
    portfolio = portfolio or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    username = '@' + esc_md(message.chat.username) if message.chat.username else ''
    address = get_location(location[0], location[1], 'ru') or "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    geolocation = f"https://google.com/maps/place/{location[0]},{location[1]}"
    await bot.send_message(client_id, "–ú–∞—Å—Ç–µ—Ä [{0}](tg://user?id={1}) {2} –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n*–ê–¥—Ä–µ—Å:* [{3}]({4})\n[–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ]({5}/{6})"
                           .format(esc_md(message.chat.full_name), message.chat.id, username, esc_md(address), geolocation, misc.portfolio_chat, esc_md(portfolio)),
                           reply_markup=ButtonSet(ButtonSet.INL_CLIENT_ACCEPT_ORDER, {'order_id': order_id, 'master_id': message.chat.id}), parse_mode='Markdown')
    await message.reply("–í—ã –æ—Ç–æ—Å–ª–∞–ª–∏ —Å–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É –∫–ª–∏–µ–Ω—Ç—É –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.\n–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã–±–µ—Ä–µ—Ç –≤–∞—Å, —Ç–æ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")


async def accept_order(message, order_id, master_id, client):
    updateQuery = "UPDATE orders SET master_id=(%s) WHERE ID=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.executemany(updateQuery, [(master_id, order_id)])
        conn.commit()
    username = '@' + esc_md(client.username) if client.username else ''
    await bot.send_message(master_id, f"[–ö–ª–∏–µ–Ω—Ç](tg://user?id={client.id}) {username} –≤—ã–±—Ä–∞–ª –í–∞—Å —Å–≤–æ–∏–º –º–∞—Å—Ç–µ—Ä–æ–º! –ú–æ–∂–µ—Ç–µ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è.", parse_mode='Markdown')
    await message.edit_reply_markup()
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ [–º–∞—Å—Ç–µ—Ä–∞](tg://user?id={master_id})! –ú–æ–∂–µ—Ç–µ —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è.", parse_mode='Markdown')


async def save_order(message, state):
    data = await state.get_data()
    await state.finish()
    insertQuery = "INSERT INTO orders (client_id, category, location, datetime) VALUES (%s, %s, ST_GeomFromText(%s), %s)"
    getLastId = "SELECT LAST_INSERT_ID()"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.executemany(insertQuery, [(message.chat.id, data['category'], loc_str(data['x'], data['y']), datetime.fromtimestamp(data['timestamp']))])
        conn.commit()
        cursor.execute(getLastId)
        form_id = cursor.fetchone()[0]
    await message.answer(f"–£—Ä–∞ü•≥ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –∏ —Å–∞–ª–æ–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω—ã, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –ø–æ—Å—Ç—É–ø—è—Ç "
                         f"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –Ω–∏—Ö —Å—é–¥–∞ –≤ –±–æ—Ç QSalon ‚úå\n–•–æ—Ä–æ—à–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è‚ò∫",
                         parse_mode='Markdown', reply_markup=ButtonSet(ButtonSet.CLIENT))
    await bulk_mailing(data, form_id)


async def master_location(message):
    selectQuery = "SELECT ST_X(location), ST_Y(location) FROM masters WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.chat.id])
        result = cursor.fetchone()
    if not result[0] or not result[1]:
        await message.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ")
    else:
        await bot.send_location(message.chat.id, result[0], result[1])
    await NewLocation.change.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞:\nüëâ –¢–ï–ö–£–©–ï–ï –ú–ï–°–¢–û , —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é¬ª\n"
                         "üëâ –î–†–£–ì–û–ï  –ú–ï–°–¢–û, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´—Å–∫—Ä–µ–ø–æ—á–∫–∞¬ª ‚Äì Location ‚Äì –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ Send location¬ª",
                         reply_markup=ButtonSet(ButtonSet.SEND_LOCATION))


async def master_categories(message, start=False):
    master = Master(message.chat.id)
    list_cats = count_list_categories(master.categories)[1]
    if master.is_active_sub:
        button_set = ButtonSet.INL_MASTER_CATEGORIES_SQUEEZE
    else:
        button_set = ButtonSet.INL_MASTER_CATEGORIES
    if not start:
        await message.edit_reply_markup(ButtonSet(button_set, list_cats))
        return
    await Subscriptions.change.set()
    await message.answer("–í—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫", reply_markup=ButtonSet(ButtonSet.SAVE_CHANGES))
    await message.answer("–£ –≤–∞—Å –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ ü§óüòÄ\n–ù–∞—à–∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –≤ –º–µ—Å—è—Ü:\n"
                         "üëâ 1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è - 190 –≥—Ä–Ω\nüëâ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - 380 –≥—Ä–Ω\nüëâ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–æ–ª—å—à–µ - 460 –≥—Ä–Ω\n\n"
                         "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Çüëå",
                         reply_markup=ButtonSet(button_set, list_cats))


async def master_subcategories(message, cat_num):
    master = Master(message.chat.id)
    key = types.InlineKeyboardMarkup()
    start_shift = 0
    for subs in misc.subcategories[:cat_num]:
        start_shift += len(subs)
    for i, sub in enumerate(misc.subcategories[cat_num]):
        sym, add = "‚ùå ", True
        if str(i + start_shift) in master.categories:
            sym, add = "‚úÖ ", False
        key.add(types.InlineKeyboardButton(sym + sub, callback_data=set_callback(
            CallbackFuncs.CHANGE_CATEGORY, {'sub_num': i + start_shift, 'cat_num': cat_num, 'add': add})))
    key.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data=set_callback(CallbackFuncs.CHANGE_CATEGORY, None)))
    with suppress(exceptions.MessageNotModified):
        await message.edit_reply_markup(key)


async def get_master_subs(message):
    selectQuery = "SELECT categories_count, balance, pay_date FROM masters WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.chat.id])
        result = cursor.fetchone()
    count, balance, pay_date = result
    key = None
    active_until = '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
    can_pay = "üëâ –ß—Ç–æ–±—ã –ü–†–û–î–õ–ò–¢–¨ –ü–û–î–ü–ò–°–ö–£ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ¬´–ø—Ä–æ–¥–ª–∏—Ç—å¬ª üòâ"
    price = get_subs_price(count)
    if pay_date:
        active_until = datetime.strftime(pay_date, '%d.%m.%Y')
    if count == 0:
        can_pay = "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Ö–æ—Ç—è-–±—ã –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã"
    elif balance < price and pay_date:
        can_pay = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü üòö"
    else:
        key = ButtonSet(ButtonSet.RENEW_SUBSCRIPTION)
        await Subs_pay.pay.set()
    await message.answer(f"*–í–∞—à –±–∞–ª–ª–∞–Ω—Å:* {balance} –≥—Ä–Ω.\n*–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:* {price} –≥—Ä–Ω.\n"
                         f"*–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:* {active_until}\n\n*{can_pay}*\n\n"
                         f"–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @rivikate", parse_mode='Markdown', reply_markup=key)


async def save_portfolio(message, state):
    data = await state.get_data()
    await state.finish()
    col = 'portfolio' if data['p_or_s'] == 1 else 'salon'
    selectQuery = f"SELECT {col} FROM masters WHERE user_id=(%s)"
    selectDataQuery = "SELECT data FROM portfolios WHERE id=(%s)"
    last_data = None
    media = MediaGroup(data)
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.chat.id])
        last_id = cursor.fetchone()
        if last_id: last_id = last_id[0]
        if data.get('only_text') or data.get('only_media'):
            cursor.execute(selectDataQuery, [last_id])
            last_data = json.loads(cursor.fetchone()[0])
    if data.get('only_text'):
        media.add(photo=last_data['photo'], video=last_data['video'])
    elif data.get('only_media'):
        media.add(text=last_data['text'])
    media_post = None

    if media.photo or media.video:
        if not media.is_media_group:
            if media.photo:
                media_post = await bot.send_photo(misc.portfolio_chat_id, media.photo[0], caption=media.text)
            elif media.video:
                media_post = await bot.send_video(misc.portfolio_chat_id, media.video[0], caption=media.text)
        else:
            media_post = await send_media_group(bot, misc.portfolio_chat_id, media)
    elif media.text:
        media_post = await bot.send_message(misc.portfolio_chat_id, media.text)

    insertQuery = "INSERT INTO portfolios (id, data) VALUES (%s, %s)"
    updateQuery = f"UPDATE masters SET {col}=(%s) WHERE user_id=(%s)"
    deleteQuery = "DELETE FROM portfolios WHERE id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.executemany(insertQuery, [(media_post.message_id, json.dumps(data, separators=(',', ':')))])
        cursor.executemany(updateQuery, [(media_post.message_id, message.chat.id)])
        cursor.execute(deleteQuery, [last_id])
        conn.commit()
    await state.finish()
    await message.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=ButtonSet(ButtonSet.MASTER_2))


async def top_up_balance(message):
    await Top_up_balance.amount.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", reply_markup=ButtonSet(ButtonSet.BACK))


@dp.message_handler(commands=['start'])
async def handle_text(message: types.Message):
    await start_menu(message)


@dp.message_handler(content_types=['photo', 'video'])
async def handle_text(message: types.Message):
    if message.forward_from_message_id:
        await handle_forwarded_posts(message)


@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message, state: FSMContext):
    if message.text == misc.back_button:
        await start_menu(message)
    elif message.text == misc.role_buttons[0]:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º!", reply_markup=ButtonSet(ButtonSet.CLIENT))
    elif message.text == misc.role_buttons[1]:
        await create_master(message)
    elif message.text == misc.client_buttons[0]:
        await create_order(message)
    elif message.text == misc.client_buttons[1]:
        await client_orders(message)
    elif message.text == misc.master_buttons_1[0]:
        await master_orders(message)
    elif message.text == misc.master_buttons_1[1]:
        await master_profile(message)
    elif message.text == misc.master_buttons_1[2]:
        await get_master_subs(message)
    elif message.text == misc.master_buttons_1[3]:
        await top_up_balance(message)
    elif message.text == misc.master_buttons_2[0]:
        await master_categories(message, True)
    elif message.text == misc.master_buttons_2[1]:
        await master_portfolio(message, state, 1)
    elif message.text == misc.master_buttons_2[2]:
        await master_portfolio(message, state, 2)
    elif message.text == misc.master_buttons_2[3]:
        await master_location(message)
    elif message.text == misc.master_buttons_2[4]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=ButtonSet(ButtonSet.MASTER_1))
    elif message.text[0] == '/' and message.text[1:].isdigit():
        await handle_orders_operations(message)
    elif message.forward_from_message_id:
        await handle_forwarded_posts(message)


@dp.message_handler(content_types=['text'], state=NewOrder.category)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.CLIENT):
        return


async def client_categories(callback_query, cat_num):
    start_shift = 0
    for subs in misc.subcategories[:cat_num]:
        start_shift += len(subs)
    subs = misc.subcategories[cat_num]
    key = types.InlineKeyboardMarkup()
    for i, sub in enumerate(subs):
        key.add(types.InlineKeyboardButton(sub, callback_data=set_callback(CallbackFuncs.NEW_ORDER_SUBCATEGORIES, i + start_shift)))
    key.add(types.InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data=set_callback(CallbackFuncs.NEW_ORDER_SUBCATEGORIES, None)))
    await callback_query.message.edit_reply_markup(key)


async def client_subcategories(callback_query, state, sub_num):
    if sub_num is None:
        await callback_query.message.edit_reply_markup(ButtonSet(ButtonSet.INL_CLIENT_CATEGORIES))
        return
    await callback_query.message.delete()
    await state.update_data({'category': sub_num})
    await NewOrder.next()
    await callback_query.message.answer(f"–í–´–ë–ï–†–ï–¢–ï –ú–ï–°–¢–û –≤ —Ä–∞–¥–∏—É—Å–µ {misc.radius} –∫–º –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—Éüòâ:\n\n"
                                        "üëâ –¢–ï–ö–£–©–ï–ï –ú–ï–°–¢–û , —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é¬ª\n"
                                        "üëâ –õ—é–±–æ–µ –î–†–£–ì–û–ï –ú–ï–°–¢–û, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´—Å–∫—Ä–µ–ø–æ—á–∫–∞¬ª ‚Äì Location ‚Äì –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ Send location¬ª",
                                        reply_markup=ButtonSet(ButtonSet.SEND_LOCATION))


@dp.message_handler(content_types=['text', 'location'], state=NewOrder.location)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.CLIENT) or not message.location:
        return
    x, y = message.location.latitude, message.location.longitude
    await state.update_data({'x': x, 'y': y})
    now = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    days = [now + timedelta(x) for x in range(8)]
    key = types.InlineKeyboardMarkup(row_width=1)
    key.add(types.InlineKeyboardButton('–ù–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', callback_data=set_callback(CallbackFuncs.CHOOSE_DAY, 0)))
    for day in days:
        key.insert(types.InlineKeyboardButton(f'{day.day} {misc.month_names[day.month - 1]}',
                                              callback_data=set_callback(CallbackFuncs.CHOOSE_DAY, int(day.timestamp()))))
    await NewOrder.next()
    await message.answer("–ò–¥—ë–º –¥–∞–ª—å—à–µ", reply_markup=ButtonSet(ButtonSet.BACK))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É", reply_markup=key)


@dp.message_handler(content_types=['text'], state=NewOrder.date)
async def handle_text(message: types.Message, state: FSMContext):
    await _back(message, state, ButtonSet.CLIENT)


async def client_choose_day(callback_query, state, timestamp):
    if timestamp == 0:
        now = datetime.now()
        if now.minute < 30:
            nearest = now.replace(minute=30)
        else:
            nearest = now.replace(hour=now.hour + 1 if now.hour < 23 else 0, minute=0)
        await state.update_data({'timestamp': nearest.timestamp()})
        await NewOrder.next()
        await client_choose_time(callback_query, state, None, True)
        return
    await state.update_data({'timestamp': timestamp})
    key = types.InlineKeyboardMarkup(row_width=2)
    for t in misc.times:
        key.insert(types.InlineKeyboardButton(t, callback_data=set_callback(CallbackFuncs.CHOOSE_TIME, t)))
    await NewOrder.next()
    await callback_query.message.delete()
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è", reply_markup=key)


@dp.message_handler(content_types=['text'], state=NewOrder.time)
async def handle_text(message: types.Message, state: FSMContext):
    await _back(message, state, ButtonSet.CLIENT)


async def client_choose_time(callback_query, state, time, skip=False):
    if not skip:
        h, m = time.split(':')
        seconds = int(h) * 3600 + int(m) * 60
        data = await state.get_data()
        await state.update_data({'timestamp': data['timestamp'] + seconds})
    args = ('' for _ in range(3))
    await NewOrder.next()
    await callback_query.message.delete()
    await callback_query.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É –±—å—é—Ç–∏ —É—Å–ª—É–≥–∏ (–º–æ–∂–Ω–∞ –¥–≤–∞ –ø—É–Ω–∫—Ç–∞üëå). –ò –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª",
                                        reply_markup=ButtonSet(ButtonSet.INL_PRICE, args))


@dp.message_handler(content_types=['text'], state=NewOrder.price)
async def handle_text(message: types.Message, state: FSMContext):
    await _back(message, state, ButtonSet.CLIENT)


async def client_choose_price(callback_query, state, price):
    data = await state.get_data()
    price_flags = data.get('price') or 0
    price_flags ^= price
    await state.update_data({'price': price_flags, 'photo': [], 'video': []})
    args = ('‚úÖ ' if price_flags & 2 ** x else '' for x in range(3))
    await callback_query.message.edit_reply_markup(ButtonSet(ButtonSet.INL_PRICE, args))


async def client_submit_price(callback_query, state):
    data = await state.get_data()
    if not data.get('price'):
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return
    await NewOrder.next()
    await callback_query.message.delete()
    await callback_query.message.answer("–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å:\nüëâ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞/—Å–∞–ª–æ–Ω–∞\n"
                                        "üëâ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä–∏–º–µ—Ä –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ü§©(–Ω–µ –±–æ–ª—å—à–µ 3-—Ö —Ñ–∞–π–ª–æ–≤),\n"
                                        "üëâ –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ü–†–û–ü–£–°–¢–ò–¢–ï –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª",
                                        reply_markup=ButtonSet(ButtonSet.NEXT, row_width=2))


@dp.message_handler(content_types=types.ContentTypes.ANY, state=NewOrder.form_text_media)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.CLIENT):
        return
    if message.text == misc.next_button:
        await save_order(message, state)
        return
    if message.text:
        if len(message.text) > 600:
            await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return
        await state.update_data({'text': message.text})
    else:
        await media_handler(message, state)


async def master_profile(message):
    selectQuery = "SELECT categories, portfolio, salon, location FROM masters WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.from_user.id])
        result = cursor.fetchone()
    if all(result):
        reply = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    else:
        reply = "*–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é!*\n\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å:\n" \
                f"{'‚Äî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' if not result[0] else ''}\n" \
                f"{'‚Äî –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ' if not result[1] else ''}\n" \
                f"{'‚Äî –°–∞–ª–æ–Ω' if not result[2] else ''}\n" \
                f"{'‚Äî –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' if not result[3] else ''}\n"
    reply += "\n\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @rivikate"
    await message.answer(reply, reply_markup=ButtonSet(ButtonSet.MASTER_2), parse_mode='Markdown')


def update_subscriptions(user_id, num, add=True):
    selectQuery = "SELECT categories FROM masters WHERE user_id=(%s)"
    updateQuery = "UPDATE masters SET categories=(%s) WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [user_id])
        result = cursor.fetchone()[0] or '[]'
        result = json.loads(result)
        if add:
            result.append(str(num))
        else:
            if str(num) in result:
                result.remove(str(num))
        cursor.executemany(updateQuery, [(json.dumps(result, separators=(',', ':')), user_id)])
        conn.commit()


async def update_subs_count(message, state):
    await state.finish()
    selectQuery = "SELECT categories, categories_count FROM masters WHERE user_id=(%s)"
    updateQuery = "UPDATE masters SET categories_count=(%s) WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.from_user.id])
        categories, old_count = cursor.fetchone()
    categories = json.loads(categories) if categories else []
    new_count = count_list_categories(categories)[0]
    answer = ''
    if old_count == new_count or (old_count >= len(misc.tariffs) and new_count >= len(misc.tariffs)):
        answer = "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    else:
        with DatabaseConnection() as db:
            conn, cursor = db
            cursor.executemany(updateQuery, [(new_count, message.from_user.id)])
            conn.commit()
        diff = abs(old_count - new_count)
        if old_count > new_count:
            answer = f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {diff}\n"
        elif old_count < new_count:
            answer = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {diff}\n"
        answer += f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {get_subs_price(new_count)} –≥—Ä–Ω."
    await message.answer(answer, reply_markup=ButtonSet(ButtonSet.MASTER_2))


async def client_orders(message):
    orders = Orders(message.from_user.id, Orders.CLIENT)
    reply = ''
    for order in orders.orders:
        master = f"[–º–∞—Å—Ç–µ—Ä](tg://user?id={order.master_id})" if order.master_id else "_–º–∞—Å—Ç–µ—Ä –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω_"
        reply += f"*{order.id}.* {order.datetime.strftime('%d.%m %H:%M')} {master}\n" \
                 f"[–ê–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ](https://google.com/maps/place/{order.latitude},{order.longitude})\n" \
                 f"\\[/11{order.id}] ‚ûñ ‚ùå *—É–¥–∞–ª–∏—Ç—å*\n‚ûñ‚ûñ‚ûñ‚ûñ\n"
    if not reply:
        reply = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
    reply_parts = parts.safe_split_text(reply, split_separator='‚ûñ‚ûñ‚ûñ‚ûñ')
    for part in reply_parts:
        await message.answer(part, parse_mode='Markdown', disable_web_page_preview=True)


async def master_orders(message):
    orders = Orders(message.from_user.id, Orders.MASTER)
    reply = ''
    for order in orders.orders:
        reply += f"*{order.id}.* {order.datetime.strftime('%d.%m %H:%M')} [–∫–ª–∏–µ–Ω—Ç](tg://user?id={order.client_id})\n" \
                 f"\\[/21{order.id}] ‚ûñ ‚ùå *—É–¥–∞–ª–∏—Ç—å*\n" \
                 f"\\[/22{order.id}] ‚ûñ ‚Ñπ *–ø–æ–¥—Ä–æ–±–Ω–µ–µ*\n‚ûñ‚ûñ‚ûñ‚ûñ\n"
    if not reply:
        reply = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
    reply_parts = parts.safe_split_text(reply, split_separator='‚ûñ‚ûñ‚ûñ‚ûñ')
    for part in reply_parts:
        await message.answer(part, parse_mode='Markdown', disable_web_page_preview=True)


async def master_portfolio(message, state, p_or_s):
    col = 'portfolio' if p_or_s == 1 else 'salon'
    selectQuery = f"SELECT {col} FROM masters WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.chat.id])
        portfolio = cursor.fetchone()[0]
    await Portfolio.view.set()
    if p_or_s == 1:
        answer = f"[–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ]({misc.portfolio_chat}/{portfolio})" if portfolio else "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        answer = f"[–°–∞–ª–æ–Ω]({misc.portfolio_chat}/{portfolio})" if portfolio else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    await state.update_data({'p_or_s': p_or_s})
    button_set = ButtonSet.EDIT
    if portfolio:
        button_set = ButtonSet.EDIT_PART if p_or_s == 1 else ButtonSet.EDIT_PART_SALON
    await message.answer(answer, parse_mode='Markdown', reply_markup=ButtonSet(button_set))


@dp.message_handler(content_types=['text'], state=Subscriptions.change)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_2):
        return
    if message.text == misc.save_changes:
        await state.finish()
        await update_subs_count(message, state)
        update_active_master(message.from_user.id)


@dp.message_handler(content_types=['text'], state=Portfolio.view)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_2):
        return
    if message.text == misc.edit_buttons[2]:
        await state.update_data({'only_text': True})
    elif message.text == misc.edit_buttons[3]:
        await state.update_data({'only_media': True, 'photo': [], 'video': []})
        await Portfolio.media.set()
        await message.answer("üëâ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (–Ω–µ –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)\n\n"
                             "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª", reply_markup=ButtonSet(ButtonSet.NEXT, row_width=2))
        return
    await Portfolio.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", reply_markup=ButtonSet(ButtonSet.BACK))


@dp.message_handler(content_types=['text'], state=Portfolio.text)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_2):
        return
    if len(message.text) > 1000:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    data = await state.get_data()
    await state.update_data({'text': message.text})
    if data.get('only_text'):
        await save_portfolio(message, state)
        return
    await Portfolio.next()
    await message.answer("üëâ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∫ –≤–∞—à–µ–º—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–Ω–µ –±–æ–ª—å—à–µ 10 —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)\n\n"
                         "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ ‚û°¬ª", reply_markup=ButtonSet(ButtonSet.NEXT, row_width=2))


@dp.message_handler(content_types=types.ContentType.ANY, state=Portfolio.media)
async def message_handler(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_2):
        return
    if message.text == misc.next_button:
        await save_portfolio(message, state)
        update_active_master(message.from_user.id)
        return
    await media_handler(message, state)


@dp.message_handler(content_types=['text', 'location'], state=NewLocation.change)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_2) or not message.location:
        return
    x, y = message.location.latitude, message.location.longitude
    updateQuery = "UPDATE masters SET location=ST_GeomFromText(%s) WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.executemany(updateQuery, [(loc_str(x, y), message.chat.id)])
        conn.commit()
    await state.finish()
    await message.answer("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ", reply_markup=ButtonSet(ButtonSet.MASTER_2))
    update_active_master(message.from_user.id)


@dp.message_handler(content_types=['text'], state=Subs_pay.pay)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_1) or message.text != "–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        return
    selectQuery = "SELECT categories_count, balance, pay_date FROM masters WHERE user_id=(%s)"
    updateQuery = "UPDATE masters SET balance=(%s), pay_date=(%s) WHERE user_id=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.execute(selectQuery, [message.chat.id])
        count, balance, pay_date = cursor.fetchone()
        new_balance = balance - (get_subs_price(count)) if pay_date else 0
        if not pay_date or pay_date < datetime.now():
            pay_date = datetime.now()
        active_until = pay_date + timedelta(days=30)
        cursor.executemany(updateQuery, [(new_balance, active_until, message.chat.id)])
        conn.commit()
    await state.finish()
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞", reply_markup=ButtonSet(ButtonSet.MASTER_1))


@dp.message_handler(content_types=['text'], state=Top_up_balance.amount)
async def handle_text(message: types.Message, state: FSMContext):
    if await _back(message, state, ButtonSet.MASTER_1):
        return
    if not message.text.isdigit():
        await message.reply("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!")
        return
    amount = int(message.text)
    if amount < 1 or amount > 1000000:
        await message.reply("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞!")
        return
    await state.finish()
    pay_link = way_for_pay_request_purchase(message.chat.id, amount)
    if isinstance(pay_link, tuple):
        logging.error(f"Error: {pay_link[1]}")
        await message.answer(f"Error: {pay_link[1]}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        return
    key = types.InlineKeyboardMarkup()
    key.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=pay_link))
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –≥—Ä–Ω.", reply_markup=ButtonSet(ButtonSet.MASTER_1))
    await message.answer("–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–∞—Ç—ë–∂.", reply_markup=key)


async def handle_orders_operations(message):
    # /11{id} - client delete
    # /21{id} - master delete
    # /22{id} - more info
    code = message.text[1:]
    order_id = int(code[2:])
    if code[0] == '1':
        if code[1] == '1':
            order = Orders(message.from_user.id, Orders.CLIENT).get(order_id)
            deleteQuery = "DELETE FROM orders WHERE ID=(%s) AND client_id=(%s)"
            with DatabaseConnection() as db:
                conn, cursor = db
                cursor.executemany(deleteQuery, [(order_id, message.from_user.id)])
                conn.commit()
            await message.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω")
            if order.master_id:
                await send_message(bot.send_message, chat_id=order.master_id, text=f"[–ö–ª–∏–µ–Ω—Ç](tg://user?id={order.client_id}) –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}", parse_mode='Markdown')
    elif code[0] == '2':
        if code[1] == '1':
            order = Orders(message.from_user.id, Orders.CLIENT).get(order_id)
            deleteQuery = "DELETE FROM orders WHERE ID=(%s) AND master_id=(%s)"
            with DatabaseConnection() as db:
                conn, cursor = db
                cursor.executemany(deleteQuery, [(order_id, message.from_user.id)])
                conn.commit()
            await message.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} —É–¥–∞–ª–µ–Ω")
            if order.client_id:
                await send_message(bot.send_message, chat_id=order.client_id, text=f"[–ú–∞—Å—Ç–µ—Ä](tg://user?id={order.master_id}) –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{order_id}", parse_mode='Markdown')
        elif code[1] == '2':
            selectMessageQuery = "SELECT message_id FROM orders WHERE ID=(%s)"
            with DatabaseConnection() as db:
                conn, cursor = db
                cursor.execute(selectMessageQuery, [order_id])
                message_id = cursor.fetchone()[0]
            await bot.send_message(message.chat.id, f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} ‚¨Ü", reply_to_message_id=message_id)


async def handle_forwarded_posts(message):
    if message.from_user.id not in misc.admins:
        return
    if message.forward_from_chat.id != misc.portfolio_chat_id:
        return
    selectQuery = "SELECT user_id FROM masters WHERE portfolio=(%s) OR salon=(%s)"
    with DatabaseConnection() as db:
        conn, cursor = db
        cursor.executemany(selectQuery, [(message.forward_from_message_id, message.forward_from_message_id)])
        result = cursor.fetchone()
    if not result:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ/—Å–∞–ª–æ–Ω–æ–º")
        return
    await message.answer(f"–ù–∞–π–¥–µ–Ω [–º–∞—Å—Ç–µ—Ä](tg://user?id={result[0]})\nuser\\_id: `{result[0]}`", parse_mode='Markdown')


@dp.callback_query_handler(lambda callback_query: True)
async def callback_inline(callback_query: types.CallbackQuery):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.CLIENT_ACCEPT_ORDER:
        await accept_order(callback_query.message, data['order_id'], data['master_id'], callback_query.message.chat)
    elif func == CallbackFuncs.MASTER_ACCEPT_ORDER:
        await perform_order(callback_query.message, data)


@dp.callback_query_handler(lambda callback_query: True, state=Subscriptions.change)
async def callback_inline(callback_query: types.CallbackQuery):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.MASTER_CATEGORIES:
        await master_subcategories(callback_query.message, data)
    elif func == CallbackFuncs.CHANGE_CATEGORY:
        if data:
            update_subscriptions(callback_query.message.chat.id, data['sub_num'], data['add'])
            await master_subcategories(callback_query.message, data['cat_num'])
        else:
            await master_categories(callback_query.message)


@dp.callback_query_handler(lambda callback_query: True, state=NewOrder.category)
async def callback_inline(callback_query: types.CallbackQuery, state: FSMContext):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.NEW_ORDER_CATEGORIES:
        await client_categories(callback_query, data)
    elif func == CallbackFuncs.NEW_ORDER_SUBCATEGORIES:
        await client_subcategories(callback_query, state, data)


@dp.callback_query_handler(lambda callback_query: True, state=NewOrder.date)
async def callback_inline(callback_query: types.CallbackQuery, state: FSMContext):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.CHOOSE_DAY:
        await client_choose_day(callback_query, state, data)


@dp.callback_query_handler(lambda callback_query: True, state=NewOrder.time)
async def callback_inline(callback_query: types.CallbackQuery, state: FSMContext):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.CHOOSE_TIME:
        await client_choose_time(callback_query, state, data)


@dp.callback_query_handler(lambda callback_query: True, state=NewOrder.price)
async def callback_inline(callback_query: types.CallbackQuery, state: FSMContext):
    data = get_callback(callback_query.data)
    if data is None: return
    func, data = data
    if func == CallbackFuncs.CHOOSE_PRICE:
        await client_choose_price(callback_query, state, data)
    elif func == CallbackFuncs.CHOOSE_PRICE_SUBMIT:
        await client_submit_price(callback_query, state)


async def on_startup(_):
    await bot.set_webhook(config.WEBHOOK_URL)
    info = await bot.get_webhook_info()
    logging.warning(f'URL: {info.url}\nPending update count: {info.pending_update_count}')


async def on_shutdown(_):
    await bot.delete_webhook()


def start_pooling():
    executor.start_polling(dp, skip_updates=True)


def start_webhook():
    executor.start_webhook(dispatcher=dp, webhook_path=config.WEBHOOK_PATH,
                           on_startup=on_startup, on_shutdown=on_shutdown,
                           host=config.WEBAPP_HOST, port=config.WEBAPP_PORT,
                           skip_updates=True, print=logging.warning)
